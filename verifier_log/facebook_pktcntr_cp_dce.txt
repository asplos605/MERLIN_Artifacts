libbpf: loading xdp_pktcntr.ll.o
libbpf: elf: section(3) xdp, size 168, link 0, flags 6, type=1
libbpf: sec 'xdp': found program 'pktcntr' at insn offset 0 (0 bytes), code size 21 insns (168 bytes)
libbpf: elf: section(4) .relxdp, size 32, link 25, flags 40, type=9
libbpf: elf: section(5) .maps, size 64, link 0, flags 3, type=1
libbpf: elf: section(6) license, size 4, link 0, flags 3, type=1
libbpf: license of xdp_pktcntr.ll.o is GPL
libbpf: elf: section(16) .BTF, size 923, link 0, flags 0, type=1
libbpf: elf: section(18) .BTF.ext, size 256, link 0, flags 0, type=1
libbpf: elf: section(20) .eh_frame, size 48, link 0, flags 2, type=1
libbpf: elf: skipping unrecognized data section(20) .eh_frame
libbpf: elf: section(21) .rel.eh_frame, size 16, link 25, flags 40, type=9
libbpf: elf: skipping relo section(21) .rel.eh_frame for section(20) .eh_frame
libbpf: elf: section(25) .symtab, size 360, link 1, flags 0, type=2
libbpf: looking for externs among 15 symbols...
libbpf: collected 0 externs total
libbpf: map 'ctl_array': at sec_idx 5, offset 0.
libbpf: map 'ctl_array': found type = 2.
libbpf: map 'ctl_array': found key [6], sz = 4.
libbpf: map 'ctl_array': found value [6], sz = 4.
libbpf: map 'ctl_array': found max_entries = 2.
libbpf: map 'cntrs_array': at sec_idx 5, offset 32.
libbpf: map 'cntrs_array': found type = 6.
libbpf: map 'cntrs_array': found key [6], sz = 4.
libbpf: map 'cntrs_array': found value [13], sz = 8.
libbpf: map 'cntrs_array': found max_entries = 512.
libbpf: sec '.relxdp': collecting relocation for section(3) 'xdp'
libbpf: sec '.relxdp': relo #0: insn #5 against 'ctl_array'
libbpf: prog 'pktcntr': found map 0 (ctl_array, sec 5, off 0) for insn #5
libbpf: sec '.relxdp': relo #1: insn #13 against 'cntrs_array'
libbpf: prog 'pktcntr': found map 1 (cntrs_array, sec 5, off 32) for insn #13
libbpf: map 'ctl_array': created successfully, fd=4
libbpf: map 'cntrs_array': created successfully, fd=5
libbpf: prog 'pktcntr': -- BEGIN PROG LOAD LOG --
func#0 @0
0: R1=ctx(off=0,imm=0) R10=fp0
; 
0: (05) goto pc+0
; 
1: (62) *(u32 *)(r10 -4) = 0          ; R10=fp0 fp-8=mmmm????
; 
2: (62) *(u32 *)(r10 -8) = 0          ; R10=fp0 fp-8=mmmmmmmm
3: (bf) r2 = r10                      ; R2_w=fp0 R10=fp0
; 
4: (07) r2 += -4                      ; R2_w=fp-4
; 
5: (18) r1 = 0xffffa035cec9e200       ; R1_w=map_ptr(off=0,ks=4,vs=4,imm=0)
7: (85) call bpf_map_lookup_elem#1    ; R0=map_value_or_null(id=1,off=0,ks=4,vs=4,imm=0)
; 
8: (15) if r0 == 0x0 goto pc+10       ; R0=map_value(off=0,ks=4,vs=4,imm=0)
; 
9: (61) r1 = *(u32 *)(r0 +0)          ; R0=map_value(off=0,ks=4,vs=4,imm=0) R1_w=scalar(umax=4294967295,var_off=(0x0; 0xffffffff))
; 
10: (15) if r1 == 0x0 goto pc+8       ; R1_w=scalar(umax=4294967295,var_off=(0x0; 0xffffffff))
11: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
; 
12: (07) r2 += -8                     ; R2_w=fp-8
13: (18) r1 = 0xffffa036137da000      ; R1_w=map_ptr(off=0,ks=4,vs=8,imm=0)
15: (85) call bpf_map_lookup_elem#1   ; R0_w=map_value_or_null(id=2,off=0,ks=4,vs=8,imm=0)
; 
16: (15) if r0 == 0x0 goto pc+2       ; R0_w=map_value(off=0,ks=4,vs=8,imm=0)
17: (b7) r1 = 1                       ; R1_w=1
; 
18: (db) lock *(u64 *)(r0 +0) += r1   ; R0=map_value(off=0,ks=4,vs=8,imm=0) R1=1
; 
19: (b7) r0 = 2                       ; R0_w=2
20: (95) exit

from 16 to 19: safe

from 10 to 19: safe

from 8 to 19: safe
verification time 53 usec
stack depth 8
processed 22 insns (limit 1000000) max_states_per_insn 0 total_states 2 peak_states 2 mark_read 1
-- END PROG LOAD LOG --
Error: failed to pin program xdp
Warning: bpftool is now running in libbpf strict mode and has more stringent requirements about BPF programs.
If it used to work for this object file but now doesn't, see --legacy option for more details.

